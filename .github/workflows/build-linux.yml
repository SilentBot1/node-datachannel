name: Build - Linux

on:
  workflow_dispatch:
  # push:
  #   tags:
  #     - v*

env:
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true

jobs:
  build-linux:
    runs-on: ubuntu-24.04
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        node-version: [16]
        arch: [amd64, arm64, arm]
        platform: [ubuntu, alpine]
        include:
          # Set baselines per platform
          - triple: "alpine-linux-musl"
            platform: alpine
            version: 3.16
            libc: musl
          - triple: "linux-gnu"
            platform: ubuntu
            version: 22.04
          # Set baselines per architecture
          - archid: x86_64
            nodearch: x64
            arch: amd64
            gcc-install: clang lld
            gcc: clang
          - archid: armv7
            archpost: eabihf
            nodearch: arm
            arch: arm
            flags: -march=armv7-a -mfpu=neon-vfpv4 -mfloat-abi=hard -fPIC
            gcc-install: clang lld
            gcc: clang
          - archid: aarch64
            nodearch: arm64
            arch: arm64
            flags: -march=armv8-a -fPIC
            gcc-install: clang lld
            gcc: clang 
          # Set edge case overrides for specific platform + architecture
          # gcc has issues building on the same arch but for a different libc, use clang instead
          - arch: amd64
            platform: ubuntu
            gcc-install: gcc g++
            version: 20.04
            gcc: gcc
          # ubuntu uses the triple `arm-linux-gnueabihf` instead of alpine's `armv7-alpine-linux-musleabihf`
          - archid: arm
            arch: arm
            platform: ubuntu

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install node dependencies
        run: npm install --ignore-scripts
        env:
          CI: true
      - if: matrix.arch != 'amd64'
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ matrix.arch }}
      - name: Install system dependencies
        run: |
          sudo apt update
          sudo apt install -y podman ninja-build ${{ matrix.gcc-install }}
      - name: Build sysroot
        run: sudo podman build -t ndc-buildroot:${{ matrix.platform }}-${{ matrix.arch }} ./build-containers --file Dockerfile.${{ matrix.platform }} --platform linux/${{ matrix.arch }} --build-arg="version=${{ matrix.version }}"
      - name: Mount sysroot
        id: sysroot
        run: echo "sysroot=$(sudo podman image mount ndc-buildroot:${{ matrix.platform }}-${{ matrix.arch }})" >> $GITHUB_OUTPUT
      - name: Build and upload
        run: sudo --preserve-env=SYSROOT,TRIPLE,COMPILER_FLAGS,LIBC,GCC,CI,PATH node_modules/.bin/prebuild --arch ${{ matrix.nodearch }} -r napi --backend cmake-js --upload -u ${{ secrets.GITHUB_TOKEN }} -- --CDCMAKE_TOOLCHAIN_FILE:FILEPATH=./cmake/toolchain/ci.cmake
        env:
          SYSROOT: ${{ steps.sysroot.outputs.sysroot }}
          TRIPLE: ${{ matrix.archid }}-${{ matrix.triple }}${{ matrix.archpost }}
          COMPILER_FLAGS: ${{ matrix.flags }}
          LIBC: ${{ matrix.libc }}
          GCC: ${{ matrix.gcc }}
          CI: true
